<!doctype html>
<html>
	<head>
		<title>Socket.IO chat</title>
		<style>
			* { margin: 0; padding: 0; box-sizing: border-box; }
			body { font: 13px Helvetica, Arial; }
			form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
			form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
			form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
			#messages { list-style-type: none; margin: 0; padding: 0; }
			#messages li { padding: 5px 10px; }
			#messages li:nth-child(odd) { background: #eee; }
		</style>
	</head>
	<body>

		<input type="text" name="name" data-bind="remoteValue: name"/>
		<input type="text" name="email" data-bind="value: email"/>

		<ul id="messages"></ul>
		<form action="">
			<input id="m" autocomplete="off" /><button>Send</button>
		</form>
		<script src="/socket.io/socket.io.js"></script>
		<script src="jquery-1.11.1.js"></script>
		<script src="/knockout.js"></script>
		<script src="http://localhost/projects/kotools/kotools.js"></script>
		<script>
			var socket = io();
			$('form').submit(function(){
				socket.emit('chat message', $('#m').val());
				$('#m').val('');
				return false;
			});

			socket.on('chat message', function(msg){
				$('#messages').append($('<li>').text(msg));
			});



			//	Remote bindings
			//	A 2-way binding via socket.io
			//
			//	Uses a namespace to limit what we get:
			//		http://socket.io/docs/rooms-and-namespaces/
			//	
			//
			ko.bindingHandlers.remoteValue = {
				init: function (element, valueAccessor, allBindingsAccessor, context) {
					var et = element.type.toUpperCase(),
						isSelect = (element.nodeName.toUpperCase() === 'SELECT'),
						isRadioOrCheckbox = et === 'RADIO' || et === 'CHECKBOX',
						va = valueAccessor(), op, val = element.value, setVal = true;

					if (isRadioOrCheckbox) {
						if (!element.checked) {
							setVal = false;
						}
					} else if(isSelect) {
						//  Grab value or the text if no value set ("" is for IE's sillyness)
						op = (element.selectedIndex)? element.options[element.selectedIndex]: "";
						val = (op.value !== undefined && op.value !== "") ? op.value: op.text;
					}

					if(setVal) {
						//  Check if it's an array, and set value appropriately
						if (va.push) {
							va.push(val);
						} else {
							va(val);
						}
					}

					if (isRadioOrCheckbox) {
						//  Pass through to KO checked
						ko.bindingHandlers.checked.init(element, valueAccessor, allBindingsAccessor, context);
					} else {
						//  Pass through to KO value
						ko.bindingHandlers.value.init(element, valueAccessor, allBindingsAccessor, context);
					}


					//	It binds the socket to the namespace or
					//	it gets the hose again.
					element['data-kosocket'] = io('/testnamespace');




					element['data-kosocket'].on('name', function(msg){
						console.log('name', msg);
					});




				},
				update: function (element, valueAccessor) {
					var et = element.type.toUpperCase(),
						isRadioOrCheckbox = et === 'RADIO' || et === 'CHECKBOX';

					var io = element['data-kosocket'];


					//  Pass through to KO
					if (isRadioOrCheckbox) {
						//	From: http://stackoverflow.com/questions/19085819/jquery-mobile-and-knockout-checkbox-not-updating-with-viewmodel
				        //KO v3 does not use 'update' for 'checked' binding
				        if (ko.bindingHandlers.checked.update) { 
				            ko.bindingHandlers.checked.update.apply(this, arguments); //for KO < v3, delegate the call
				        } else {
				            ko.utils.unwrapObservable(valueAccessor()); //for KO v3, force a subscription to get further updates
						}


					} else {
						ko.bindingHandlers.value.update(element, valueAccessor);
					}
				}
			};




			var VM = function(){
				var self = this;
				self.name = ko.observable();
				self.email = ko.observable();
			};

			vm = new VM();

			ko.applyBindings(vm);






		</script>
	</body>
</html>